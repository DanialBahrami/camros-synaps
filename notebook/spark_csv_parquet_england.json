{
	"name": "spark_csv_parquet_england",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "sparkpoolshs",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "ec48581d-db58-46ed-81fe-3f8c544154b1"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/327d3d2b-5fad-4059-9ee2-3fd8fe732331/resourceGroups/rg-shs-southuk/providers/Microsoft.Synapse/workspaces/syn-ws-shs/bigDataPools/sparkpoolshs",
				"name": "sparkpoolshs",
				"type": "Spark",
				"endpoint": "https://syn-ws-shs.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/sparkpoolshs",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.4",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 10
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"tags": [
						"parameters"
					]
				},
				"source": [
					"filename = ''"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from pyspark.sql import SparkSession\n",
					"from pyspark.sql.types import StructType, StructField, StringType, IntegerType, FloatType\n",
					"\n",
					"# Define paths\n",
					"raw_zone_path = \"abfss://container-epd@dlsshs.dfs.core.windows.net/raw/\"\n",
					"refined_zone_path = \"abfss://container-epd@dlsshs.dfs.core.windows.net/refined/\"\n",
					"\n",
					"\n",
					"# Define schema\n",
					"schema = StructType([\n",
					"  StructField(\"YEAR_MONTH\", IntegerType(), True),\n",
					"  StructField(\"REGIONAL_OFFICE_NAME\", StringType(), True),\n",
					"  StructField(\"REGIONAL_OFFICE_CODE\", StringType(), True),\n",
					"  StructField(\"ICB_NAME\", StringType(), True),\n",
					"  StructField(\"ICB_CODE\", StringType(), True),\n",
					"  StructField(\"PCO_NAME\", StringType(), True),\n",
					"  StructField(\"PCO_CODE\", StringType(), True),\n",
					"  StructField(\"PRACTICE_NAME\", StringType(), True),\n",
					"  StructField(\"PRACTICE_CODE\", StringType(), True),\n",
					"  StructField(\"ADDRESS_1\", StringType(), True),\n",
					"  StructField(\"ADDRESS_2\", StringType(), True),\n",
					"  StructField(\"ADDRESS_3\", StringType(), True),\n",
					"  StructField(\"ADDRESS_4\", StringType(), True),\n",
					"  StructField(\"POSTCODE\", StringType(), True),\n",
					"  StructField(\"BNF_CHEMICAL_SUBSTANCE\", StringType(), True),\n",
					"  StructField(\"CHEMICAL_SUBSTANCE_BNF_DESCR\", StringType(), True),\n",
					"  StructField(\"BNF_CODE\", StringType(), True),\n",
					"  StructField(\"BNF_DESCRIPTION\", StringType(), True),\n",
					"  StructField(\"BNF_CHAPTER_PLUS_CODE\", StringType(), True),\n",
					"  StructField(\"QUANTITY\", FloatType(), True),\n",
					"  StructField(\"ITEMS\", IntegerType(), True),\n",
					"  StructField(\"TOTAL_QUANTITY\", FloatType(), True),\n",
					"  StructField(\"ADQUSAGE\", FloatType(), True),\n",
					"  StructField(\"NIC\", FloatType(), True),\n",
					"  StructField(\"ACTUAL_COST\", FloatType(), True),\n",
					"  StructField(\"UNIDENTIFIED\", StringType(), True)\n",
					"])\n",
					"\n",
					"# Initialize Spark session\n",
					"spark = SparkSession.builder \\\n",
					"    .appName(\"CSV to Parquet England\") \\\n",
					"    .getOrCreate()"
				],
				"execution_count": 1
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from pyspark.sql.functions import col, split\n",
					"\n",
					"# Read CSV file with header, enforcing schema\n",
					"df = spark.read.option(\"header\", \"true\").schema(schema).csv(raw_zone_path + filename)\n",
					"\n",
					"# Extract year and month from YEAR_MONTH\n",
					"df = df.withColumn(\"YEAR\", col(\"YEAR_MONTH\").cast(\"string\").substr(1, 4).cast(\"int\"))\n",
					"df = df.withColumn(\"MONTH\", col(\"YEAR_MONTH\").cast(\"string\").substr(5, 2).cast(\"int\"))\n",
					"\n",
					"# Convert to Parquet with partitioning on existing YEAR_MONTH column and append mode\n",
					"df.write.partitionBy(\"YEAR_MONTH\").parquet(refined_zone_path, mode=\"append\")\n",
					"\n",
					"# Stop Spark session\n",
					"spark.stop()"
				],
				"execution_count": 2
			}
		]
	}
}